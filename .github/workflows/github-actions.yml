# github repository actions 페이지에 나타날 이름
name: CI/CD using github actions & docker
# event trigger
# main 브랜치에 push가 되었을 때 실행
on:
  push:
    branches: ['test']

permissions:
  contents: read

jobs:
  CI-CD:
    runs-on: ubuntu-latest
    steps:
      # github 가상환경에서 작업할 수 있도록 repository 코드 복제
      - uses: actions/checkout@v3

      # set ENV from Action secret

      # docker build & push to production
      - name: Docker build & push to prodction
        if: contains(github.ref, 'test')
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME}} -p ${{ secrets.DOCKER_PASSWORD}}
          docker build --build-arg NEXT_PUBLIC_REST_API_KEY=${{ secrets.REST_API_KEY }} --platform linux/amd64 -t ${{ secrets.DOCKER_USERNAME}}/myeonjeobeottae .
          docker push ${{ secrets.DOCKER_USERNAME}}/myeonjeobeottae

      # deploy to production
      - name: Deploy to production
        uses: appleboy/ssh-action@master
        id: deploy-prod
        if: contains(github.ref, 'test')
        with:
          host: ${{ secrets.EC2_HOST}}
          username: ${{ secrets.EC2_USERNAME}}
          key: ${{ secrets.EC2_KEY}}
          envs: GITHUB_SHA
          script: |
            sudo su
            docker system prune -f
            docker-compose down
            docker-compose pull
            docker-compose up -d --build

# deploy:
#     needs: build
#     runs-on: ubuntu-latest

#     steps:
#       - name: SSH connect to production server
#         uses: appleboy/ssh-action@master
#         with:
#           host: ${{ secrets.HOST }}
#           username: ${{ secrets.USERNAME }}
#           key: ${{ secrets.SSH_PRIVATE_KEY }}
#           password: ${{ secrets.PASSWORD }}
#           port: ${{ secrets.PORT }}
#           script: |
#             cd server
#             docker rmi $(docker images -f "dangling=true" -q)
#             docker-compose down
#             docker-compose pull
#             docker-compose up --force-recreate --build -d
